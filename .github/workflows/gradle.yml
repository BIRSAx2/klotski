# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  pull_request:
    branches: [ main ]

jobs:
  macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Natives cache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - run: brew install yasm ccache
    - name: Setup ccache
      run: echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
    - name: Build with Gradle
      run: ./gradlew buildFFmpegMacos64 jnigen jnigenBuild
    - name: Upload macOS natives
      uses: actions/upload-artifact@v2.1.4
      with:
        name: macos-natives
        path: gdx-video-desktop/libs

  linux:
    needs: macos
    runs-on: ubuntu-18.04
    env:
      ORG_GRADLE_PROJECT_GITHUB_USERNAME: ""
      ORG_GRADLE_PROJECT_GITHUB_API_TOKEN: ""
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Gradle cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Natives cache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-ccache
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - run: sudo sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
    - run: sudo grep "ubuntu.com/ubuntu" /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
    - run: sudo sed -i 's/amd64,i386/armhf,arm64/' /etc/apt/sources.list.d/ports.list
    - run: sudo sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
    - name: Add extra platform architectures
      run: sudo dpkg --add-architecture i386; sudo dpkg --add-architecture armhf; sudo dpkg --add-architecture arm64
    - run: sudo apt-get update || true
    - name: Install Windows compilers
      run: sudo apt-get -yq install g++-mingw-w64-i686 g++-mingw-w64-x86-64
    - name: Install Linux x86 compilers/libraries
      run: sudo apt-get -yq install gcc-multilib g++-multilib linux-libc-dev:i386 libstdc++-5-dev:i386 ccache
    - name: Install Linux arm32 compilers/libraries
      run: sudo apt-get -yq install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
    - name: Install Linux arm64 compilers/libraries
      run: sudo apt-get -yq install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
    - name: Install yasm for ffmpeg
      run: sudo apt-get -yq install yasm
    - name: Setup ccache
      run: echo "/usr/lib/ccache" >> $GITHUB_PATH
    - name: Download macOS natives
      uses: actions/download-artifact@v2.0.5
      with:
        name: macos-natives
        path: gdx-video-desktop/libs

    - name: Build natives with Gradle
      run: ./gradlew buildFFmpeg jnigen jnigenBuild jnigenJarNativesDesktop --info
    - name: Create debug keystore for android
      run: keytool -genkey -v -keystore $HOME/.android/debug.keystore -storetype PKCS12 -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -noprompt -dname "CN=GdxVideo, OU=libGDX, O=libGDX, L=Unknown, ST=Unknown, C=US"
    - name: Build whole project with gradle
      run: ./gradlew build
    - name: Upload all output libs
      if: ${{ always() }}
      uses: actions/upload-artifact@v2.1.4
      with:
        name: output-libs
        path: '**/build/libs/'
